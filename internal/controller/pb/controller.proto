syntax = "proto3";

option go_package = "github.com/psidex/nomad/internal/controller/pb";

package pb;

service Controller {
  // A bi-directional stream for controller<->worker communication
  rpc WorkerStream(stream WorkerMessage) returns (stream ControllerMessage);
}

// An instruction from the controller to agent of what to scrape
message ScrapeInstruction {
  // A list of URLs to scrape
  repeated string urls = 1;
}

// Configuration update for workers
message WorkerConfig {
  // A unique ID for the worker assigned by the controller
  int32 worker_id = 1;
  // The timeout the agent should use for each single page scrape operation
  int32 single_scrape_timeout_ms = 2;
}

// An instruction from the controller for an agent
message ControllerMessage {
  oneof message {
    ScrapeInstruction scrape_instruction = 1;
    WorkerConfig config_update = 2;
  }
}

message WorkerHandshake {
  // The version of nomad the agent is using
  int64 nomad_version = 1;
}

// Information about a single page scrape operation
message ScrapeMetrics {
  // The total number of bytes downloaded during the operation
  int64 response_size_bytes = 1;
  // The number of URLs in the found_urls list
  int32 num_found_urls = 2;
  // How long this individual scrape took to execute
  int32 scrape_duration_ms = 3;
}

// If not NONE, the reason for a scrape failure
enum ScrapeError {
  // No error
  NONE = 0;
  // The request could not be made
  INVALID_REQUEST = 1;
  // The scrape timed out
  TIMEOUT = 2;
}

// Information from scraping a single URL
message ScrapedData {
  // The agent that scraped
  int32 agent_id = 1;
  // The URL scraped
  string scraped_url = 2;
  // The URLs found on the page
  repeated string found_urls = 3;
  // Metrics from the scape
  ScrapeMetrics metrics = 4;
  // If there was an error
  ScrapeError error = 5;
}

message WorkerMessage {
  oneof message {
    WorkerHandshake handshake = 1;
    ScrapedData data = 2;
  }
}
